@using InfertilityTreatmentSystem.GraphQLClients.BlazorWAS.TrungLB.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Checking authentication...</span>
        </div>
    </div>
}
else if (isAuthenticated)
{
    @ChildContent
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark text-center">
                        <h5><i class="bi bi-shield-lock"></i> Authentication Required</h5>
                    </div>
                    <div class="card-body text-center">
                        <i class="bi bi-lock-fill text-warning" style="font-size: 3rem;"></i>
                        <h4 class="mt-3">Access Restricted</h4>
                        <p class="text-muted">
                            You need to be logged in to access Treatment Reminder features.
                        </p>
                        <div class="d-grid gap-2 mt-4">
                            <button class="btn btn-primary" @onclick="RedirectToLogin">
                                <i class="bi bi-box-arrow-in-right"></i> Login Now
                            </button>
                            <a href="/" class="btn btn-outline-secondary">
                                <i class="bi bi-house"></i> Go to Home
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        isLoading = false;
    }

    private async Task RedirectToLogin()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Please log in to continue", "info");
        Navigation.NavigateTo("/login");
    }
}